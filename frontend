import { useState, useEffect } from "react";
import { AlertCircle, BookOpen, CheckCircle, FileText, HelpCircle, Loader2 } from "lucide-react";

// Main application component
export default function App() {
  // State management
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [activeTab, setActiveTab] = useState("generator");
  const [synopsis, setSynopsis] = useState("");
  const [isGoogleDocsModalOpen, setIsGoogleDocsModalOpen] = useState(false);
  const [genre, setGenre] = useState("");
  const [timeline, setTimeline] = useState("");
  const [episodeCount, setEpisodeCount] = useState(1);
  const [wordCount, setWordCount] = useState(1000);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedEpisodes, setGeneratedEpisodes] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  // Authentication status check on component mount
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await fetch("/api/auth/status", {
          credentials: "include"
        });
        
        if (response.ok) {
          const data = await response.json();
          setIsAuthenticated(data.isAuthenticated);
          if (data.isAuthenticated) {
            setUser(data.user);
          }
        }
      } catch (error) {
        console.error("Error checking authentication status:", error);
      }
    };

    checkAuth();
  }, []);

  // Handle Google Sign In
  const handleGoogleSignIn = async () => {
    window.location.href = "/api/auth/google";
  };

  // Handle Sign Out
  const handleSignOut = async () => {
    try {
      await fetch("/api/auth/logout", {
        method: "POST",
        credentials: "include"(888***)
      });
      setIsAuthenticated(false);
      setUser(null);
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  // Handle Google Docs Import
  const openGoogleDocsModal = () => {
    setIsGoogleDocsModalOpen(true);
  };

  // Importing a document from Google Docs
  const importFromGoogleDocs = async (docId) => {
    try {
      setIsGoogleDocsModalOpen(false);
      setErrorMessage("");
      
      const response = await fetch(`/api/google-docs/import?docId=${docId}`, {
        credentials: "include"
      });
      
      if (!response.ok) {
        throw new Error("Failed to import document");
      }
      
      const data = await response.json();
      setSynopsis(data.content);
      setSuccessMessage("Synopsis successfully imported from Google Docs!");
      
      // Clear success message after 3 seconds
      setTimeout(() => {
        setSuccessMessage("");
      }, 3000);
    } catch (error) {
      setErrorMessage("Error importing from Google Docs: " + error.message);
    }
  };

  // Generate episodes based on synopsis and selected options
  const generateEpisodes = async () => {
    // Validation
    if (!synopsis.trim()) {
      setErrorMessage("Please provide a synopsis.");
      return;
    }
    
    if (!genre) {
      setErrorMessage("Please select a genre.");
      return;
    }
    
    if (!timeline) {
      setErrorMessage("Please select a timeline/era.");
      return;
    }
    
    // Synopsis length check (max 2000 words)
    const wordCount = synopsis.trim().split(/\s+/).length;
    if (wordCount > 2000) {
      setErrorMessage("Synopsis exceeds the 2000 word limit. Please shorten it.");
      return;
    }
    
    setErrorMessage("");
    setIsGenerating(true);
    
    try {
      const response = await fetch("/api/generate-episodes", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          synopsis,
          genre,
          timeline,
          episodeCount,
          wordCount
        }),
        credentials: "include"
      });
      
      if (!response.ok) {
        throw new Error("Failed to generate episodes");
      }
      
      const data = await response.json();
      setGeneratedEpisodes(data.episodes);
      setActiveTab("episodes");
    } catch (error) {
      setErrorMessage("Error generating episodes: " + error.message);
    } finally {
      setIsGenerating(false);
    }
  };

  // Download episodes as PDF
  const downloadAsPDF = async () => {
    try {
      const response = await fetch("/api/download/pdf", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          episodes: generatedEpisodes,
          title: `${genre} ${timeline} Episodes`
        }),
        credentials: "include"
      });
      
      if (!response.ok) {
        throw new Error("Failed to generate PDF");
      }
      
      // Create blob from response and trigger download
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `episodes-${Date.now()}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      setErrorMessage("Error downloading PDF: " + error.message);
    }
  };

  // Download episodes as Text
  const downloadAsText = () => {
    try {
      const text = generatedEpisodes.map((episode, index) => 
        `EPISODE ${index + 1}\n\n${episode.content}\n\n${"=".repeat(80)}\n\n`
      ).join("");
      
      const blob = new Blob([text], { type: "text/plain" });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `episodes-${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      setErrorMessage("Error downloading text file: " + error.message);
    }
  };

  // Render authentication screen
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-100 to-purple-100 flex flex-col items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-xl p-8 max-w-md w-full">
          <h1 className="text-3xl font-bold text-center text-indigo-700 mb-6">Author's Episodic Content Generator</h1>
          <p className="text-gray-600 mb-8 text-center">
            Generate compelling episodic content based on your story synopsis. Please sign in to continue.
          </p>
          <button
            onClick={handleGoogleSignIn}
            className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-4 rounded-md transition duration-300 flex items-center justify-center"
          >
            <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
              />
              <path
                fill="currentColor"
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
              />
              <path
                fill="currentColor"
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
              />
              <path
                fill="currentColor"
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
              />
            </svg>
            Sign in with Google
          </button>
        </div>
        <p className="mt-8 text-sm text-gray-500">
          For authors aged 15-60. Your data is secure and private.
        </p>
      </div>
    );
  }

  // Main application UI when authenticated
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-indigo-700 text-white shadow-md">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <BookOpen className="h-6 w-6" />
            <h1 className="text-xl font-bold">Author's Episodic Content Generator</h1>
          </div>
          <div className="flex items-center space-x-4">
            {user && (
              <div className="flex items-center">
                {user.profilePicture && (
                  <img
                    src={user.profilePicture}
                    alt={user.name}
                    className="w-8 h-8 rounded-full mr-2"
                  />
                )}
                <span className="text-sm mr-4">{user.name}</span>
              </div>
            )}
            <button
              onClick={handleSignOut}
              className="bg-indigo-800 hover:bg-indigo-900 px-3 py-1 rounded-md text-sm transition duration-300"
            >
              Sign Out
            </button>
          </div>
        </div>
      </header>

      {/* Tabs */}
      <div className="bg-white shadow-sm">
        <div className="container mx-auto px-4">
          <div className="flex space-x-4">
            <button
              className={`py-4 px-2 font-medium text-sm transition duration-300 border-b-2 ${
                activeTab === "generator"
                  ? "border-indigo-500 text-indigo-600"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
              onClick={() => setActiveTab("generator")}
            >
              Episode Generator
            </button>
            <button
              className={`py-4 px-2 font-medium text-sm transition duration-300 border-b-2 ${
                activeTab === "episodes"
                  ? "border-indigo-500 text-indigo-600"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
              onClick={() => setActiveTab("episodes")}
              disabled={generatedEpisodes.length === 0}
            >
              Generated Episodes
            </button>
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <main className="container mx-auto px-4 py-8">
        {/* Error Message */}
        {errorMessage && (
          <div className="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md flex items-start">
            <AlertCircle className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
            <span>{errorMessage}</span>
          </div>
        )}

        {/* Success Message */}
        {successMessage && (
          <div className="mb-6 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md flex items-start">
            <CheckCircle className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
            <span>{successMessage}</span>
          </div>
        )}

        {/* Episode Generator Tab */}
        {activeTab === "generator" && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">Create Your Episodic Content</h2>
            
            {/* Synopsis Section */}
            <div className="mb-8">
              <div className="flex justify-between items-center mb-2">
                <label htmlFor="synopsis" className="block text-sm font-medium text-gray-700">
                  Your Story Synopsis (max 2,000 words)
                </label>
                <button
                  onClick={openGoogleDocsModal}
                  className="text-sm text-indigo-600 hover:text-indigo-800 flex items-center"
                >
                  <FileText className="h-4 w-4 mr-1" />
                  Import from Google Docs
                </button>
              </div>
              <textarea
                id="synopsis"
                rows={8}
                className="w-full border rounded-md p-3 text-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Enter your story synopsis here..."
                value={synopsis}
                onChange={(e) => setSynopsis(e.target.value)}
              ></textarea>
              <p className="text-xs text-gray-500 mt-1">
                Word count: {synopsis.trim() ? synopsis.trim().split(/\s+/).length : 0}/2000
              </p>
            </div>

            {/* Options Section */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              {/* Genre Selection */}
              <div>
                <label htmlFor="genre" className="block text-sm font-medium text-gray-700 mb-1">
                  Genre
                </label>
                <select
                  id="genre"
                  className="w-full border rounded-md p-2 text-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  value={genre}
                  onChange={(e) => setGenre(e.target.value)}
                >
                  <option value="">Select Genre</option>
                  <option value="fantasy">Fantasy</option>
                  <option value="sci-fi">Science Fiction</option>
                  <option value="romance">Romance</option>
                  <option value="mystery">Mystery/Thriller</option>
                  <option value="historical">Historical Fiction</option>
                  <option value="adventure">Adventure</option>
                  <option value="horror">Horror</option>
                  <option value="comedy">Comedy</option>
                  <option value="drama">Drama</option>
                  <option value="young-adult">Young Adult</option>
                </select>
              </div>

              {/* Timeline/Era Selection */}
              <div>
                <label htmlFor="timeline" className="block text-sm font-medium text-gray-700 mb-1">
                  Timeline/Era
                </label>
                <select
                  id="timeline"
                  className="w-full border rounded-md p-2 text-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  value={timeline}
                  onChange={(e) => setTimeline(e.target.value)}
                >
                  <option value="">Select Timeline/Era</option>
                  <option value="ancient">Ancient World</option>
                  <option value="medieval">Medieval</option>
                  <option value="renaissance">Renaissance</option>
                  <option value="victorian">Victorian Era</option>
                  <option value="1920s">1920s</option>
                  <option value="modern">Modern Day</option>
                  <option value="near-future">Near Future</option>
                  <option value="far-future">Far Future</option>
                  <option value="dystopian">Dystopian</option>
                  <option value="post-apocalyptic">Post-Apocalyptic</option>
                  <option value="alternate-history">Alternate History</option>
                </select>
              </div>

              {/* Episode Count */}
              <div>
                <label htmlFor="episodeCount" className="block text-sm font-medium text-gray-700 mb-1">
                  Number of Episodes (1-200)
                </label>
                <input
                  type="number"
                  id="episodeCount"
                  min="1"
                  max="200"
                  className="w-full border rounded-md p-2 text-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  value={episodeCount}
                  onChange={(e) => setEpisodeCount(Math.min(200, Math.max(1, parseInt(e.target.value) || 1)))}
                />
              </div>

              {/* Word Count per Episode */}
              <div>
                <label htmlFor="wordCount" className="block text-sm font-medium text-gray-700 mb-1">
                  Words per Episode
                </label>
                <select
                  id="wordCount"
                  className="w-full border rounded-md p-2 text-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  value={wordCount}
                  onChange={(e) => setWordCount(parseInt(e.target.value))}
                >
                  <option value="1000">1,000 words</option>
                  <option value="2000">2,000 words</option>
                  <option value="3000">3,000 words</option>
                  <option value="4000">4,000 words</option>
                  <option value="5000">5,000 words</option>
                </select>
              </div>
            </div>

            {/* Generate Button */}
            <div className="flex justify-center">
              <button
                onClick={generateEpisodes}
                disabled={isGenerating}
                className="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-6 rounded-md transition duration-300 flex items-center"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                    Generating Episodes...
                  </>
                ) : (
                  "Generate Episodes"
                )}
              </button>
            </div>
          </div>
        )}

        {/* Generated Episodes Tab */}
        {activeTab === "episodes" && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-gray-800">
                Your Generated Episodes ({generatedEpisodes.length})
              </h2>
              <div className="flex space-x-2">
                <button
                  onClick={downloadAsPDF}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-md text-sm transition duration-300"
                >
                  Download as PDF
                </button>
                <button
                  onClick={downloadAsText}
                  className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm transition duration-300"
                >
                  Download as Text
                </button>
              </div>
            </div>

            {generatedEpisodes.length > 0 ? (
              <div className="space-y-6">
                {generatedEpisodes.map((episode, index) => (
                  <div key={index} className="border rounded-md p-4">
                    <h3 className="text-xl font-semibold text-indigo-700 mb-3">
                      Episode {index + 1}
                    </h3>
                    <div className="prose max-w-none">
                      {episode.content.split('\n').map((paragraph, pIndex) => (
                        <p key={pIndex} className="mb-3 text-gray-700">
                          {paragraph}
                        </p>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12">
                <p className="text-gray-500">No episodes have been generated yet.</p>
              </div>
            )}
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-gray-100 py-6 mt-12">
        <div className="container mx-auto px-4 text-center text-gray-500 text-sm">
          <p>&copy; {new Date().getFullYear()} Author's Episodic Content Generator. All rights reserved.</p>
        </div>
      </footer>

      {/* Google Docs Modal */}
      {isGoogleDocsModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl p-6 max-w-md w-full">
            <h3 className="text-xl font-semibold mb-4">Import from Google Docs</h3>
            <p className="text-gray-600 mb-4">
              Enter the Google Doc ID to import your synopsis:
            </p>
            <div className="mb-4">
              <input
                type="text"
                className="w-full border rounded-md p-2"
                placeholder="Doc ID (e.g., 1abc...xyz)"
                id="docIdInput"
              />
              <p className="text-xs text-gray-500 mt-1">
                You can find the Doc ID in your Google Doc URL: docs.google.com/document/d/[DOC_ID]/edit
              </p>
            </div>
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setIsGoogleDocsModalOpen(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  const docId = document.getElementById("docIdInput").value.trim();
                  if (docId) {
                    importFromGoogleDocs(docId);
                  }
                }}
                className="px-4 py-2 bg-indigo-600 rounded-md text-sm text-white hover:bg-indigo-700"
              >
                Import
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Help Tooltip */}
      <div className="fixed bottom-6 right-6">
        <button
          className="bg-indigo-600 hover:bg-indigo-700 text-white rounded-full w-12 h-12 flex items-center justify-center shadow-lg transition duration-300"
          onClick={() => alert("Need help? Contact support at help@episodic-generator.com")}
        >
          <HelpCircle className="h-6 w-6" />
        </button>
      </div>
    </div>
  );
}
